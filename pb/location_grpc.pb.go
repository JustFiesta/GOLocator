// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v5.26.1
// source: protos/location.proto

package protos

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// UserLocationServiceClient is the client API for UserLocationService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type UserLocationServiceClient interface {
	UpdateUserLocation(ctx context.Context, in *UpdateLocationRequest, opts ...grpc.CallOption) (*UpdateLocationResponse, error)
	SearchUsers(ctx context.Context, in *SearchUsersRequest, opts ...grpc.CallOption) (*SearchUsersResponse, error)
}

type userLocationServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewUserLocationServiceClient(cc grpc.ClientConnInterface) UserLocationServiceClient {
	return &userLocationServiceClient{cc}
}

func (c *userLocationServiceClient) UpdateUserLocation(ctx context.Context, in *UpdateLocationRequest, opts ...grpc.CallOption) (*UpdateLocationResponse, error) {
	out := new(UpdateLocationResponse)
	err := c.cc.Invoke(ctx, "/user_location.UserLocationService/UpdateUserLocation", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userLocationServiceClient) SearchUsers(ctx context.Context, in *SearchUsersRequest, opts ...grpc.CallOption) (*SearchUsersResponse, error) {
	out := new(SearchUsersResponse)
	err := c.cc.Invoke(ctx, "/user_location.UserLocationService/SearchUsers", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// UserLocationServiceServer is the server API for UserLocationService service.
// All implementations must embed UnimplementedUserLocationServiceServer
// for forward compatibility
type UserLocationServiceServer interface {
	UpdateUserLocation(context.Context, *UpdateLocationRequest) (*UpdateLocationResponse, error)
	SearchUsers(context.Context, *SearchUsersRequest) (*SearchUsersResponse, error)
	mustEmbedUnimplementedUserLocationServiceServer()
}

// UnimplementedUserLocationServiceServer must be embedded to have forward compatible implementations.
type UnimplementedUserLocationServiceServer struct {
}

func (UnimplementedUserLocationServiceServer) UpdateUserLocation(context.Context, *UpdateLocationRequest) (*UpdateLocationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateUserLocation not implemented")
}
func (UnimplementedUserLocationServiceServer) SearchUsers(context.Context, *SearchUsersRequest) (*SearchUsersResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SearchUsers not implemented")
}
func (UnimplementedUserLocationServiceServer) mustEmbedUnimplementedUserLocationServiceServer() {}

// UnsafeUserLocationServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to UserLocationServiceServer will
// result in compilation errors.
type UnsafeUserLocationServiceServer interface {
	mustEmbedUnimplementedUserLocationServiceServer()
}

func RegisterUserLocationServiceServer(s grpc.ServiceRegistrar, srv UserLocationServiceServer) {
	s.RegisterService(&UserLocationService_ServiceDesc, srv)
}

func _UserLocationService_UpdateUserLocation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateLocationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserLocationServiceServer).UpdateUserLocation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/user_location.UserLocationService/UpdateUserLocation",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserLocationServiceServer).UpdateUserLocation(ctx, req.(*UpdateLocationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserLocationService_SearchUsers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SearchUsersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserLocationServiceServer).SearchUsers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/user_location.UserLocationService/SearchUsers",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserLocationServiceServer).SearchUsers(ctx, req.(*SearchUsersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// UserLocationService_ServiceDesc is the grpc.ServiceDesc for UserLocationService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var UserLocationService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "user_location.UserLocationService",
	HandlerType: (*UserLocationServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "UpdateUserLocation",
			Handler:    _UserLocationService_UpdateUserLocation_Handler,
		},
		{
			MethodName: "SearchUsers",
			Handler:    _UserLocationService_SearchUsers_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "protos/location.proto",
}
